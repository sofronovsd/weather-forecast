{"version":3,"sources":["components/logo/Logo.tsx","components/card/Card.tsx","assets/cities.ts","components/dropdown/Dropdown.tsx","assets/Academy-Weather-bg160.svg","assets/chevron-left.svg","assets/chevron-right.svg","api/weather-api.ts","components/weather-card/WeatherCard.tsx","components/weekly-forecast-card/WeeklyForecastCard.tsx","components/date-picker/DatePicker.tsx","components/date-forecast-card/DateForecastCard.tsx","pages/main-page/MainPage.tsx","App.tsx","index.tsx"],"names":["Logo","className","Card","children","cardStyles","classNames","cities","name","latitude","longitude","Dropdown","placeholder","options","handleSelect","disabled","useState","selected","setSelected","dropdownElement","useRef","optionsListElement","selectStyles","ref","onFocus","current","classList","add","onBlur","remove","map","option","onClick","blur","handleSelectOption","getHistoricalWeather","lat","lon","time","a","fetch","process","result","ok","json","Error","getWeatherForecast","WeatherCard","icon","temp","date","iconClassName","iconStyles","imgSrc","src","alt","Math","floor","moment","format","initialCity","initialForecast","daily","WeeklyForecastCard","city","setCity","forecast","setForecast","loading","setLoading","index","setIndex","leftArrowStyles","rightArrowStyles","useEffect","then","res","catch","e","console","log","message","finally","isForecast","useMemo","length","arrowLeft","prev","arrowRight","weather","max","dt","mockImage","DatePicker","value","setValue","type","onChange","target","DateForecastCard","setDate","test","formattedDate","toDate","getTime","MainPage","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.37383692.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport './Logo.scss'\r\n\r\nconst Logo = () => {\r\n  return (\r\n    <div className=\"logo\">\r\n      <span className=\"logo__text logo__text--left\">Weather</span>\r\n      <span className=\"logo__text logo__text--right\">forecast</span>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Logo\r\n","import React from 'react'\r\nimport classNames from 'classnames'\r\n\r\nimport './Card.scss'\r\n\r\ntype CardProps = {\r\n  className?: string\r\n  children?: JSX.Element[] | JSX.Element\r\n}\r\n\r\nconst Card = ({ children, className }: CardProps) => {\r\n  const cardStyles = classNames(className, 'card')\r\n  return <article className={cardStyles}>{children}</article>\r\n}\r\n\r\nexport default Card\r\n","export interface City {\r\n  name: string\r\n  latitude: number\r\n  longitude: number\r\n}\r\n\r\nconst cities: City[] = [\r\n  { name: 'Samara', latitude: 53.195873, longitude: 50.100193 },\r\n  {\r\n    name: 'Tolyatti',\r\n    latitude: 53.507836,\r\n    longitude: 49.420393\r\n  },\r\n  {\r\n    name: 'Saratov',\r\n    latitude: 51.533557,\r\n    longitude: 46.034257\r\n  },\r\n  {\r\n    name: 'Kazan',\r\n    latitude: 55.796127,\r\n    longitude: 49.106405\r\n  },\r\n  {\r\n    name: 'Krasnodar',\r\n    latitude: 45.03547,\r\n    longitude: 38.975313\r\n  }\r\n]\r\n\r\nexport default cities\r\n","import React, { useRef, useState } from 'react'\r\nimport classNames from 'classnames'\r\n\r\nimport './Dropdown.scss'\r\n\r\ntype DropdownProps = {\r\n  placeholder?: string\r\n  options: any[]\r\n  className?: string\r\n  handleSelect: (option: any) => void\r\n  disabled?: boolean\r\n}\r\n\r\nconst Dropdown = ({ placeholder, options, className, handleSelect, disabled }: DropdownProps) => {\r\n  const [selected, setSelected] = useState()\r\n  const dropdownElement = useRef<HTMLButtonElement>(null)\r\n  const optionsListElement = useRef<HTMLDivElement>(null)\r\n\r\n  const handleSelectOption = (option: any) => {\r\n    handleSelect(option)\r\n    setSelected(option.name)\r\n    dropdownElement.current?.blur()\r\n  }\r\n\r\n  const handleFocus = () => {\r\n    optionsListElement.current?.classList.add('dropdown__option-list--visible')\r\n  }\r\n\r\n  const handleBlur = () => {\r\n    optionsListElement.current?.classList.remove('dropdown__option-list--visible')\r\n  }\r\n\r\n  const selectStyles = classNames(className, 'dropdown', 'text', 'text--secondary')\r\n\r\n  return (\r\n    <button\r\n      className={selectStyles}\r\n      ref={dropdownElement}\r\n      onFocus={handleFocus}\r\n      onBlur={handleBlur}\r\n      disabled={disabled}\r\n    >\r\n      {selected || placeholder}\r\n      <div className=\"dropdown__option-list\" ref={optionsListElement}>\r\n        {options.map(option => (\r\n          <div key={option.name} onClick={() => handleSelectOption(option)}>\r\n            {option.name}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </button>\r\n  )\r\n}\r\n\r\nexport default Dropdown\r\n","export default __webpack_public_path__ + \"static/media/Academy-Weather-bg160.1a743710.svg\";","export default __webpack_public_path__ + \"static/media/chevron-left.668da982.svg\";","export default __webpack_public_path__ + \"static/media/chevron-right.d8b7c444.svg\";","export interface DailyForecast {\r\n  daily: DayForecast[]\r\n}\r\n\r\ninterface DayForecast {\r\n  dt: number\r\n  weather: Weather[]\r\n  temp: Temperature\r\n}\r\n\r\ninterface Weather {\r\n  icon: string\r\n}\r\n\r\ninterface Temperature {\r\n  max: number\r\n}\r\n\r\nexport interface HistoricalWeather {\r\n  current: CurrentWeather\r\n}\r\n\r\ninterface CurrentWeather {\r\n  dt: number\r\n  weather: Weather[]\r\n  temp: number\r\n}\r\n\r\nexport const getHistoricalWeather = async (lat: number, lon: number, time: number): Promise<HistoricalWeather> => {\r\n  const result = await fetch(\r\n    `https://api.openweathermap.org/data/2.5/onecall/timemachine?lat=${lat}&lon=${lon}&dt=${time}&units=metric&appid=${process.env.REACT_APP_WEATHER_API_KEY}`\r\n  )\r\n\r\n  if (result.ok) {\r\n    return result.json()\r\n  } else {\r\n    throw new Error('Cannot fetch historical weather')\r\n  }\r\n}\r\n\r\nexport const getWeatherForecast = async (lat: number, lon: number): Promise<DailyForecast> => {\r\n  const result = await fetch(\r\n    `https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&units=metric&exclude=current,minutely,hourly,alerts&appid=${process.env.REACT_APP_WEATHER_API_KEY}`\r\n  )\r\n\r\n  if (result.ok) {\r\n    return result.json()\r\n  } else {\r\n    throw new Error('Cannot fetch forecast')\r\n  }\r\n}\r\n","import React from 'react'\r\nimport classNames from 'classnames'\r\n\r\nimport Card from '../card/Card'\r\n\r\nimport './WeatherCard.scss'\r\nimport moment from 'moment'\r\n\r\ntype WeatherCardProps = {\r\n  className?: string\r\n  iconClassName?: string\r\n  icon: string\r\n  temp: number\r\n  date: number\r\n}\r\n\r\nconst WeatherCard = ({ className, icon, temp, date, iconClassName }: WeatherCardProps) => {\r\n  const cardStyles = classNames(className, 'weather-card')\r\n  const iconStyles = classNames(iconClassName, 'weather-card__icon')\r\n\r\n  const imgSrc = `http://openweathermap.org/img/wn/${icon}@2x.png`\r\n  return (\r\n    <Card className={cardStyles}>\r\n      <img className={iconStyles} src={imgSrc} alt=\"weather\" />\r\n      <h1 className=\"weather-card__temp text--weak\">{`${temp > 0 ? '+' : '-'}${Math.floor(temp)}°`}</h1>\r\n      <span className=\"weather-card__date text text--weak text--bold\">{moment(date * 1000).format('DD MMM YYYY')}</span>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default WeatherCard\r\n","import React, { useEffect, useMemo, useState } from 'react'\r\n\r\nimport Card from '../card/Card'\r\nimport cities, { City } from '../../assets/cities'\r\nimport Dropdown from '../dropdown/Dropdown'\r\n\r\nimport mockImage from '../../assets/Academy-Weather-bg160.svg'\r\nimport arrowLeft from '../../assets/chevron-left.svg'\r\nimport arrowRight from '../../assets/chevron-right.svg'\r\nimport './WeeklyForecastCard.scss'\r\nimport { DailyForecast, getWeatherForecast } from '../../api/weather-api'\r\nimport WeatherCard from '../weather-card/WeatherCard'\r\nimport classNames from 'classnames'\r\n\r\nconst initialCity: City = {\r\n  name: '',\r\n  longitude: 0,\r\n  latitude: 0\r\n}\r\n\r\nconst initialForecast: DailyForecast = {\r\n  daily: []\r\n}\r\n\r\nconst WeeklyForecastCard = () => {\r\n  const [city, setCity] = useState(initialCity)\r\n  const [forecast, setForecast] = useState(initialForecast)\r\n  const [loading, setLoading] = useState(false)\r\n  const [index, setIndex] = useState(0)\r\n\r\n  const leftArrowStyles = classNames('weekly-forecast-card__arrow', 'weekly-forecast-card__arrow--left', {\r\n    'weekly-forecast-card__arrow--disabled': index === 0\r\n  })\r\n\r\n  const rightArrowStyles = classNames('weekly-forecast-card__arrow', 'weekly-forecast-card__arrow--right', {\r\n    'weekly-forecast-card__arrow--disabled': index === 5\r\n  })\r\n\r\n  const handleSelectCity = (city: City) => {\r\n    setCity(city)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (city.name) {\r\n      setLoading(true)\r\n      getWeatherForecast(city.latitude, city.longitude)\r\n        .then(res => {\r\n          setForecast(res)\r\n        })\r\n        .catch(e => {\r\n          console.log('Error:', e.message)\r\n        })\r\n        .finally(() => {\r\n          setLoading(false)\r\n        })\r\n    }\r\n  }, [city])\r\n\r\n  const isForecast = useMemo(() => {\r\n    return forecast.daily.length > 0\r\n  }, [forecast])\r\n\r\n  const handleLeftArrowClick = () => {\r\n    if (index > 0) {\r\n      setIndex(prev => prev - 1)\r\n    }\r\n  }\r\n\r\n  const handleRightArrowClick = () => {\r\n    if (index < 5) {\r\n      setIndex(prev => prev + 1)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <h1 className=\"weekly-forecast-card__header\">7 Days Forecast</h1>\r\n      <Dropdown\r\n        className=\"weekly-forecast-card__dropdown\"\r\n        placeholder=\"Select city\"\r\n        options={cities}\r\n        handleSelect={handleSelectCity}\r\n        disabled={loading}\r\n      />\r\n      <div className=\"weekly-forecast-card__image-container\">\r\n        {isForecast ? (\r\n          <>\r\n            <img className={leftArrowStyles} src={arrowLeft} onClick={handleLeftArrowClick} alt=\"left\" />\r\n            <img className={rightArrowStyles} src={arrowRight} onClick={handleRightArrowClick} alt=\"left\" />\r\n            <div className=\"weekly-forecast-card__forecast-container\">\r\n              <WeatherCard\r\n                icon={forecast.daily[index].weather[0].icon}\r\n                temp={forecast.daily[index].temp.max}\r\n                date={forecast.daily[index].dt}\r\n                iconClassName=\"weekly-forecast-card__weather-icon\"\r\n                className=\"weekly-forecast-card__weather-card\"\r\n              />\r\n              <WeatherCard\r\n                icon={forecast.daily[index + 1].weather[0].icon}\r\n                temp={forecast.daily[index + 1].temp.max}\r\n                date={forecast.daily[index + 1].dt}\r\n                iconClassName=\"weekly-forecast-card__weather-icon\"\r\n                className=\"weekly-forecast-card__weather-card\"\r\n              />\r\n              <WeatherCard\r\n                icon={forecast.daily[index + 2].weather[0].icon}\r\n                temp={forecast.daily[index + 2].temp.max}\r\n                date={forecast.daily[index + 2].dt}\r\n                iconClassName=\"weekly-forecast-card__weather-icon\"\r\n                className=\"weekly-forecast-card__weather-card\"\r\n              />\r\n            </div>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <img src={mockImage} className=\"weekly-forecast-card__mock-image\" alt=\"mocked weather\" />\r\n            <span className=\"text text--secondary text--bold text--center\">\r\n              Fill in all the fields and the weather will be displayed\r\n            </span>\r\n          </>\r\n        )}\r\n      </div>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default WeeklyForecastCard\r\n","import React, { useState } from 'react'\r\n\r\nimport './DatePicker.scss'\r\n\r\ntype DatePickerProps = {\r\n  placeholder?: string\r\n  handleSelect: (date: string) => void\r\n  disabled?: boolean\r\n}\r\n\r\nconst DatePicker = ({ placeholder, handleSelect, disabled }: DatePickerProps) => {\r\n  const [value, setValue] = useState('')\r\n\r\n  const handleChangeValue = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const date = e.target.value\r\n    setValue(date)\r\n    handleSelect(date)\r\n  }\r\n\r\n  return (\r\n    <input\r\n      type=\"text\"\r\n      className=\"date-picker text text--secondary\"\r\n      placeholder={placeholder}\r\n      value={value}\r\n      onChange={handleChangeValue}\r\n      disabled={disabled}\r\n    />\r\n  )\r\n}\r\n\r\nexport default DatePicker\r\n","import React, { useEffect, useMemo, useState } from 'react'\r\n\r\nimport Card from '../card/Card'\r\nimport Dropdown from '../dropdown/Dropdown'\r\n\r\nimport cities, { City } from '../../assets/cities'\r\nimport mockImage from '../../assets/Academy-Weather-bg160.svg'\r\nimport { getHistoricalWeather, HistoricalWeather } from '../../api/weather-api'\r\nimport './DateForecastCard.scss'\r\nimport DatePicker from '../date-picker/DatePicker'\r\nimport moment from 'moment'\r\nimport WeatherCard from '../weather-card/WeatherCard'\r\n\r\nconst initialCity: City = {\r\n  name: '',\r\n  longitude: 0,\r\n  latitude: 0\r\n}\r\n\r\nconst initialForecast: HistoricalWeather = {\r\n  current: {\r\n    dt: 0,\r\n    temp: 0,\r\n    weather: []\r\n  }\r\n}\r\n\r\nconst DateForecastCard = () => {\r\n  const [city, setCity] = useState(initialCity)\r\n  const [date, setDate] = useState('')\r\n  const [loading, setLoading] = useState(false)\r\n  const [forecast, setForecast] = useState(initialForecast)\r\n\r\n  useEffect(() => {\r\n    if (city.name && /[0-9/]{10}/.test(date)) {\r\n      setLoading(true)\r\n      const formattedDate =\r\n        moment(date, 'DD/MM/YYYY')\r\n          .add(12, 'hours')\r\n          .toDate()\r\n          .getTime() / 1000\r\n      getHistoricalWeather(city.latitude, city.longitude, formattedDate)\r\n        .then(res => {\r\n          setForecast(res)\r\n        })\r\n        .catch(e => {\r\n          console.log('Error:', e.message)\r\n        })\r\n        .finally(() => {\r\n          setLoading(false)\r\n        })\r\n    }\r\n  }, [city, date])\r\n\r\n  const isForecast = useMemo(() => {\r\n    return forecast.current.weather.length > 0\r\n  }, [forecast])\r\n\r\n  const handleSelectCity = (city: City) => {\r\n    setCity(city)\r\n  }\r\n\r\n  const handleSelectDate = (date: string) => {\r\n    setDate(date)\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <h1 className=\"date-forecast-card__header\">Forecast for a Date in the Past</h1>\r\n      <div className=\"date-forecast-card__inputs-container\">\r\n        <Dropdown placeholder=\"Select city\" options={cities} handleSelect={handleSelectCity} disabled={loading} />\r\n        <DatePicker placeholder=\"Select date\" handleSelect={handleSelectDate} disabled={loading} />\r\n      </div>\r\n      <div className=\"date-forecast-card__image-container\">\r\n        {isForecast ? (\r\n          <WeatherCard\r\n            icon={forecast.current.weather[0]?.icon}\r\n            temp={forecast.current.temp}\r\n            date={forecast.current.dt}\r\n          />\r\n        ) : (\r\n          <>\r\n            <img src={mockImage} className=\"date-forecast-card__mock-image\" alt=\"mocked weather\" />\r\n            <span className=\"text text--secondary text--bold text--center\">\r\n              Fill in all the fields and the weather will be displayed\r\n            </span>\r\n          </>\r\n        )}\r\n      </div>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default DateForecastCard\r\n","import React from 'react'\r\n\r\nimport Logo from '../../components/logo/Logo'\r\nimport WeeklyForecastCard from '../../components/weekly-forecast-card/WeeklyForecastCard'\r\nimport DateForecastCard from '../../components/date-forecast-card/DateForecastCard'\r\n\r\nimport './MainPage.scss'\r\n\r\nconst MainPage = () => {\r\n  return (\r\n    <article className=\"main-page\">\r\n      <header className=\"main-page__header\">\r\n        <Logo />\r\n      </header>\r\n      <main className=\"main-page__main\">\r\n        <WeeklyForecastCard />\r\n        <DateForecastCard />\r\n      </main>\r\n      <footer className=\"main-page__footer\">\r\n        <span className=\"text text--small text--weak\">C ЛЮБОВЬЮ ОТ MERCURY DEVELOPMENT</span>\r\n      </footer>\r\n    </article>\r\n  )\r\n}\r\n\r\nexport default MainPage\r\n","import React from 'react'\n\nimport MainPage from './pages/main-page/MainPage'\n\nconst App = () => {\n  return <MainPage />\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from './App'\n\nimport './sass/main.scss'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}